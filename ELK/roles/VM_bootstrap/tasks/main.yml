---
- name: Provision instances.
  ec2:
    key_name: "{{ ec2_vars.key_name }}"
    instance_type: "{{ ec2_vars.instance_type }}"
    image: "{{ ec2_vars.image }}"
    wait: yes
    count: "{{ total_nodes }}"
    wait: true
    vpc_subnet_id: "{{ ec2_vars.vpc_subnet_id }}"
    assign_public_ip: yes
    region: "{{ ec2_vars.region }}"
    group_id: "{{ ec2_vars.group_id }}"
  register: ec2

- name: Add all instance public IPs to host group
  add_host: hostname={{ item.public_ip }} groups=ec2hosts
  loop: "{{ ec2.instances }}"

- name: Add instances to cluster "linux_server"
  add_host: hostname={{ item.public_ip }} groups=linux_server
  loop: "{{ ec2.instances }}"
  when: item.ami_launch_index == "0"

- name: Add instances to cluster "monitoring_normal"
  add_host: hostname={{ item.public_ip }} groups=monitoring_normal
  loop: "{{ ec2.instances }}"
  when: (item.ami_launch_index|int in range(1, non_production_nodes+1))

- name: Add instances to cluster "monitoring_production"
  add_host: hostname={{ item.public_ip }} groups=monitoring_production
  loop: "{{ ec2.instances }}"
  when: (item.ami_launch_index|int in range(non_production_nodes+1, non_production_nodes+production_nodes|int+1))

- name: Add instances to cluster "logstash"
  add_host: hostname={{ item.public_ip }} groups=logstash
  loop: "{{ ec2.instances }}"
  when: (item.ami_launch_index == "1")

- name: Add instances to cluster "kibana"
  add_host: hostname={{ item.public_ip }} groups=kibana
  loop: "{{ ec2.instances }}"
  when: (item.ami_launch_index == "1")

- pause: minutes=1
